# =============================================================================
# File: src/main/resources/application.yml
# 🔥 HADES BACKEND - SPRING BOOT CONFIGURATION
# Author: Sankhadeep Banerjee
# Project: Hades - Kotlin + Spring Boot Backend (The Powerful Decision Engine)
# Purpose: Main application configuration with environment-specific profiles
# =============================================================================

# Default Profile Configuration
spring:
  application:
    name: hades-backend
    version: 1.0.0
    description: "Hades - The Powerful Decision Engine Below"
  
  profiles:
    active: development
  
  # Database Configuration
  datasource:
    url: jdbc:postgresql://localhost:5432/hades_dev
    username: ${DB_USERNAME:hades_user}
    password: ${DB_PASSWORD:hades_password}
    driver-class-name: org.postgresql.Driver
    hikari:
      pool-name: HadesHikariPool
      maximum-pool-size: ${DB_POOL_SIZE:20}
      minimum-idle: ${DB_POOL_MIN_IDLE:5}
      idle-timeout: ${DB_POOL_IDLE_TIMEOUT:300000}
      max-lifetime: ${DB_POOL_MAX_LIFETIME:1800000}
      connection-timeout: ${DB_POOL_CONNECTION_TIMEOUT:30000}
      leak-detection-threshold: ${DB_POOL_LEAK_DETECTION:60000}
      connection-test-query: SELECT 1
  
  # JPA/Hibernate Configuration
  jpa:
    database: postgresql
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    hibernate:
      ddl-auto: ${HIBERNATE_DDL_AUTO:validate}
      naming:
        physical-strategy: org.hibernate.boot.model.naming.CamelCaseToUnderscoresNamingStrategy
        implicit-strategy: org.springframework.boot.orm.jpa.hibernate.SpringImplicitNamingStrategy
    properties:
      hibernate:
        format_sql: ${HIBERNATE_FORMAT_SQL:true}
        show_sql: ${HIBERNATE_SHOW_SQL:false}
        use_sql_comments: ${HIBERNATE_SQL_COMMENTS:true}
        jdbc:
          batch_size: ${HIBERNATE_BATCH_SIZE:25}
          fetch_size: ${HIBERNATE_FETCH_SIZE:50}
        cache:
          use_second_level_cache: ${HIBERNATE_SECOND_LEVEL_CACHE:true}
          use_query_cache: ${HIBERNATE_QUERY_CACHE:true}
          region:
            factory_class: org.hibernate.cache.jcache.JCacheRegionFactory
        enable_lazy_load_no_trans: false
        temp:
          use_jdbc_metadata_defaults: false
    show-sql: ${JPA_SHOW_SQL:false}
    open-in-view: false
  
  # Redis Configuration
  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:}
      database: ${REDIS_DATABASE:0}
      timeout: ${REDIS_TIMEOUT:2000ms}
      lettuce:
        pool:
          max-active: ${REDIS_POOL_MAX_ACTIVE:8}
          max-idle: ${REDIS_POOL_MAX_IDLE:8}
          min-idle: ${REDIS_POOL_MIN_IDLE:0}
          max-wait: ${REDIS_POOL_MAX_WAIT:-1ms}
  
  # Web Configuration
  mvc:
    async:
      request-timeout: ${REQUEST_TIMEOUT:30000}
    servlet:
      load-on-startup: 1
  
  # JSON Configuration
  jackson:
    default-property-inclusion: non_null
    serialization:
      write-dates-as-timestamps: false
      write-durations-as-timestamps: false
      indent-output: ${JSON_INDENT_OUTPUT:false}
    deserialization:
      fail-on-unknown-properties: false
      fail-on-null-for-primitives: true
    time-zone: UTC
    date-format: yyyy-MM-dd'T'HH:mm:ss.SSS'Z'
  
  # Security Configuration
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID:}
            client-secret: ${GOOGLE_CLIENT_SECRET:}
            scope: openid,profile,email
          github:
            client-id: ${GITHUB_CLIENT_ID:}
            client-secret: ${GITHUB_CLIENT_SECRET:}
            scope: user:email
  
  # Email Configuration
  mail:
    host: ${MAIL_HOST:smtp.gmail.com}
    port: ${MAIL_PORT:587}
    username: ${MAIL_USERNAME:}
    password: ${MAIL_PASSWORD:}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
            required: true
          connectiontimeout: 5000
          timeout: 5000
          writetimeout: 5000
  
  # File Upload Configuration
  servlet:
    multipart:
      max-file-size: ${MAX_FILE_SIZE:10MB}
      max-request-size: ${MAX_REQUEST_SIZE:10MB}
      file-size-threshold: ${FILE_SIZE_THRESHOLD:2KB}
  
  # Cache Configuration
  cache:
    type: redis
    redis:
      time-to-live: ${CACHE_TTL:3600000}
      key-prefix: "hades:"
      use-key-prefix: true
      cache-null-values: false

# Server Configuration
server:
  port: ${SERVER_PORT:8080}
  servlet:
    context-path: ${CONTEXT_PATH:/}
    session:
      timeout: ${SESSION_TIMEOUT:30m}
      cookie:
        http-only: true
        secure: ${COOKIE_SECURE:false}
        same-site: lax
  compression:
    enabled: ${COMPRESSION_ENABLED:true}
    mime-types: text/html,text/xml,text/plain,text/css,text/javascript,application/javascript,application/json
    min-response-size: 1024
  http2:
    enabled: ${HTTP2_ENABLED:true}
  error:
    include-message: always
    include-binding-errors: always
    include-stacktrace: ${ERROR_INCLUDE_STACKTRACE:on_param}

# Management Configuration (Actuator)
management:
  endpoints:
    web:
      exposure:
        include: ${ACTUATOR_ENDPOINTS:health,info,metrics,prometheus}
      base-path: ${ACTUATOR_BASE_PATH:/actuator}
  endpoint:
    health:
      show-details: ${HEALTH_SHOW_DETAILS:when_authorized}
      show-components: always
    metrics:
      enabled: true
  metrics:
    export:
      prometheus:
        enabled: ${PROMETHEUS_ENABLED:true}
    distribution:
      percentiles-histogram:
        http:
          server:
            requests: true
  health:
    redis:
      enabled: true
    db:
      enabled: true

# Application-specific Configuration
app:
  name: "Hades Decision Engine"
  version: "1.0.0"
  description: "The Powerful Decision Engine Below"
  
  # Security Settings
  security:
    jwt:
      secret: ${JWT_SECRET:your-super-secret-jwt-key-that-should-be-at-least-256-bits-long}
      access-token-expiration: ${JWT_ACCESS_EXPIRATION:900000} # 15 minutes
      refresh-token-expiration: ${JWT_REFRESH_EXPIRATION:604800000} # 7 days
      issuer: ${JWT_ISSUER:hades-backend}
      audience: ${JWT_AUDIENCE:kairos-frontend}
    
    cors:
      allowed-origins: ${CORS_ALLOWED_ORIGINS:http://localhost:5173,http://localhost:3000}
      allowed-methods: ${CORS_ALLOWED_METHODS:GET,POST,PUT,DELETE,OPTIONS}
      allowed-headers: ${CORS_ALLOWED_HEADERS:*}
      allow-credentials: ${CORS_ALLOW_CREDENTIALS:true}
      max-age: ${CORS_MAX_AGE:3600}
    
    rate-limiting:
      enabled: ${RATE_LIMITING_ENABLED:true}
      requests-per-minute: ${RATE_LIMIT_RPM:1000}
      requests-per-hour: ${RATE_LIMIT_RPH:10000}
      burst-capacity: ${RATE_LIMIT_BURST:100}
  
  # Multi-tenancy Settings
  tenancy:
    default-tenant: ${DEFAULT_TENANT:default}
    tenant-header: ${TENANT_HEADER:X-Tenant-ID}
    tenant-resolution-strategy: ${TENANT_RESOLUTION:header} # header, subdomain, or parameter
    tenant-isolation-strategy: ${TENANT_ISOLATION:schema} # schema, database, or discriminator
  
  # Email Settings
  email:
    from-address: ${EMAIL_FROM:noreply@kairos.dev}
    from-name: ${EMAIL_FROM_NAME:Kairos Team}
    template-path: ${EMAIL_TEMPLATE_PATH:classpath:/templates/email/}
    base-url: ${EMAIL_BASE_URL:http://localhost:5173}
    
    # Email Templates
    templates:
      welcome: welcome.html
      email-verification: email-verification.html
      password-reset: password-reset.html
      password-reset-confirmation: password-reset-confirmation.html
      account-locked: account-locked.html
      account-activated: account-activated.html
      account-deactivated: account-deactivated.html
  
  # Business Logic Settings
  business:
    password:
      min-length: ${PASSWORD_MIN_LENGTH:8}
      max-length: ${PASSWORD_MAX_LENGTH:128}
      require-uppercase: ${PASSWORD_REQUIRE_UPPERCASE:true}
      require-lowercase: ${PASSWORD_REQUIRE_LOWERCASE:true}
      require-digits: ${PASSWORD_REQUIRE_DIGITS:true}
      require-special-chars: ${PASSWORD_REQUIRE_SPECIAL:true}
      max-failed-attempts: ${PASSWORD_MAX_FAILED_ATTEMPTS:5}
      lockout-duration: ${PASSWORD_LOCKOUT_DURATION:30} # minutes
    
    tokens:
      password-reset-validity: ${TOKEN_PASSWORD_RESET_VALIDITY:24} # hours
      email-verification-validity: ${TOKEN_EMAIL_VERIFICATION_VALIDITY:72} # hours
      cleanup-interval: ${TOKEN_CLEANUP_INTERVAL:3600} # seconds
    
    session:
      max-concurrent-sessions: ${MAX_CONCURRENT_SESSIONS:3}
      session-timeout: ${SESSION_TIMEOUT_MINUTES:30} # minutes
      remember-me-validity: ${REMEMBER_ME_VALIDITY:604800} # seconds (7 days)
  
  # Feature Flags
  features:
    email-verification-required: ${FEATURE_EMAIL_VERIFICATION:true}
    password-reset-enabled: ${FEATURE_PASSWORD_RESET:true}
    registration-enabled: ${FEATURE_REGISTRATION:true}
    social-login-enabled: ${FEATURE_SOCIAL_LOGIN:false}
    multi-factor-auth-enabled: ${FEATURE_MFA:false}
    audit-logging-enabled: ${FEATURE_AUDIT_LOGGING:true}
    analytics-enabled: ${FEATURE_ANALYTICS:true}
  
  # API Settings
  api:
    version: v1
    base-path: /api/v1
    rate-limiting:
      enabled: ${API_RATE_LIMITING:true}
      requests-per-minute: ${API_RATE_LIMIT_RPM:1000}
    pagination:
      default-page-size: ${API_DEFAULT_PAGE_SIZE:20}
      max-page-size: ${API_MAX_PAGE_SIZE:100}
    
    documentation:
      title: "Hades Decision Engine API"
      description: "The Powerful Decision Engine Below - REST API Documentation"
      version: "1.0.0"
      contact:
        name: "Sankhadeep Banerjee"
        email: "sankhadeep@kairos.dev"
      license:
        name: "Private License"
        url: "https://kairos.dev/license"

# Logging Configuration
logging:
  level:
    root: ${LOG_LEVEL_ROOT:INFO}
    com.kairos.hades: ${LOG_LEVEL_APP:DEBUG}
    org.springframework.security: ${LOG_LEVEL_SECURITY:INFO}
    org.springframework.web: ${LOG_LEVEL_WEB:INFO}
    org.hibernate: ${LOG_LEVEL_HIBERNATE:WARN}
    org.hibernate.SQL: ${LOG_LEVEL_SQL:DEBUG}
    org.hibernate.type.descriptor.sql.BasicBinder: ${LOG_LEVEL_SQL_PARAMS:TRACE}
    org.springframework.cache: ${LOG_LEVEL_CACHE:DEBUG}
  pattern:
    console: "%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(%5p) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n%wEx"
    file: "%d{yyyy-MM-dd HH:mm:ss.SSS} %5p ${PID:- } --- [%15.15t] %-40.40logger{39} : %m%n%wEx"
  file:
    name: ${LOG_FILE:logs/hades.log}
    max-size: ${LOG_MAX_FILE_SIZE:10MB}
    max-history: ${LOG_MAX_HISTORY:30}
    total-size-cap: ${LOG_TOTAL_SIZE_CAP:100MB}

---
# Development Profile
spring:
  config:
    activate:
      on-profile: development
  
  datasource:
    url: jdbc:postgresql://localhost:5432/hades_dev
    username: ${DB_USERNAME:hades_user}
    password: ${DB_PASSWORD:hades_password}
  
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        format_sql: true
        show_sql: true
  
  data:
    redis:
      host: localhost
      port: 6379
      database: 0

app:
  security:
    cors:
      allowed-origins: "http://localhost:5173,http://localhost:3000,http://127.0.0.1:5173"
  
  email:
    base-url: "http://localhost:5173"

server:
  servlet:
    session:
      cookie:
        secure: false

logging:
  level:
    com.kairos.hades: DEBUG
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE

---
# Testing Profile
spring:
  config:
    activate:
      on-profile: test
  
  datasource:
    url: jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
    username: sa
    password: ""
    driver-class-name: org.h2.Driver
  
  jpa:
    database-platform: org.hibernate.dialect.H2Dialect
    hibernate:
      ddl-auto: create-drop
    show-sql: false
  
  data:
    redis:
      host: localhost
      port: 6380
      database: 1

app:
  security:
    jwt:
      secret: "test-secret-key-that-is-long-enough-for-testing-purposes-only"
      access-token-expiration: 900000
      refresh-token-expiration: 604800000
  
  email:
    base-url: "http://localhost:5173"

logging:
  level:
    root: WARN
    com.kairos.hades: INFO

---
# Production Profile
spring:
  config:
    activate:
      on-profile: production
  
  datasource:
    url: ${DATABASE_URL}
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
    hikari:
      maximum-pool-size: 30
      minimum-idle: 10
  
  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: false
    properties:
      hibernate:
        format_sql: false
        show_sql: false
  
  data:
    redis:
      host: ${REDIS_HOST}
      port: ${REDIS_PORT}
      password: ${REDIS_PASSWORD}
      ssl: ${REDIS_SSL:true}

app:
  security:
    cors:
      allowed-origins: ${CORS_ALLOWED_ORIGINS}
    jwt:
      secret: ${JWT_SECRET}
  
  email:
    base-url: ${FRONTEND_BASE_URL}

server:
  servlet:
    session:
      cookie:
        secure: true

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus

logging:
  level:
    root: INFO
    com.kairos.hades: INFO
  file:
    name: /var/log/hades/application.log